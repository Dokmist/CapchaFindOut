Шаг 1 Поучение капчи. В моём случае методом post + base64
- Загрузка капчи в допустимом объеме для анализа
- Запуск 1_postPngSave.py. Реализует метод post+base64
- Результат будет хранится в img

Шаг 1 Очистка от шума
- Необходимо добится максимальной очистки. Так что модифицируем код под капчу
- Исходная (неочищенная) капча img
- Запуск 0_CleanCapt.py. Для наглядности стоит поставить в цикл и посмотреть как очищается капча в большом массиве
- Результат imgClean.

Шаг 2. Разбивка капчи по цифрам razbivkaCapt/razbivka.py
- Сохранить исходник капчи png из директории imgClean
- Запустить razbivka.py
- Цель получить каждую цифру отдельно. Нужно поигратся с координатами для отцентровки капчи
- Скрипт так-же предназначен для определения длинны каждого из символов капчи так как они могут быть разными. Для этого меняем i и j для достижения нужного эффекта
- Необходимо так же определить ширину каждого символа. Далее это понадибится для корректировки распознования
- Очень важно добится чтобы разбивка производилась максимально одинаково для всех символов

Шаг 3. Составление алфовита в json. Из себя он представляет матрицу где 0 это черный цвет цифры остальное белый - 255
- Из очищенных изображений еобходимо составить алфовит всех цифр и букв
- При необходимости символы доочистить вручную
- Переместить в папку json этолонные (очищенные) символы для алфовита
- Запустить josn\json.py - результат алфовит в json

Шаг 4. Подгонка алгоритма по распознованию капчи
- 5_AlgMain.py
- Выжным для алгоритма является дописание условий ширины символов в соответствии с проанализированной капчей
- 

Всё ы одном 999_ALLOneMain.py